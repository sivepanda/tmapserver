import subprocess
import os
import sys
import time
import webbrowser
import tempfile
import shutil
import json
from pathlib import Path
import requests
import psutil
import signal

class TissUUmapsServer:
    def __init__(self):
        self.process = None
        self.server_url = None
        self.temp_dir = None
        
    def check_tissuumaps_installed(self):
        """Check if TissUUmaps is installed in the current environment."""
        try:
            result = subprocess.run(['python', '-c', 'import tissuumaps'], 
                                  capture_output=True, text=True)
            return result.returncode == 0
        except:
            return False
    
    def check_conda_available(self):
        """Check if conda is available."""
        try:
            result = subprocess.run(['conda', '--version'], 
                                  capture_output=True, text=True)
            return result.returncode == 0
        except:
            return False
    
    def install_tissuumaps(self):
        """Install TissUUmaps using conda."""
        if not self.check_conda_available():
            raise RuntimeError("Conda is not available. Please install conda first.")
        
        print("Installing TissUUmaps via conda...")
        try:
            # Install TissUUmaps from conda-forge
            cmd = ['conda', 'install', '-c', 'conda-forge', 'tissuumaps', '-y']
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                raise RuntimeError(f"Failed to install TissUUmaps: {result.stderr}")
            
            print("TissUUmaps installed successfully!")
            return True
        except Exception as e:
            print(f"Error installing TissUUmaps: {e}")
            return False
    
    def ensure_tissuumaps_available(self):
        """Ensure TissUUmaps is available, installing if necessary."""
        if self.check_tissuumaps_installed():
            print("TissUUmaps is already installed.")
            return True
        
        print("TissUUmaps not found. Attempting to install...")
        return self.install_tissuumaps()
    
    def convert_anndata_for_tissuumaps(self, adata, output_dir):
        """Convert AnnData to TissUUmaps-compatible format."""
        try:
            # Create output directory
            os.makedirs(output_dir, exist_ok=True)
            
            # Export the data as CSV for TissUUmaps
            # TissUUmaps typically works with CSV files containing coordinates and metadata
            if 'spatial' in adata.obsm:
                # Use spatial coordinates if available
                spatial_coords = adata.obsm['spatial']
                df = adata.obs.copy()
                df['x'] = spatial_coords[:, 0]
                df['y'] = spatial_coords[:, 1]
            else:
                # Use first two principal components or create dummy coordinates
                if 'X_pca' in adata.obsm and adata.obsm['X_pca'].shape[1] >= 2:
                    coords = adata.obsm['X_pca'][:, :2]
                    df = adata.obs.copy()
                    df['x'] = coords[:, 0]
                    df['y'] = coords[:, 1]
                else:
                    # Create dummy grid coordinates
                    import numpy as np
                    n_cells = adata.n_obs
                    grid_size = int(np.ceil(np.sqrt(n_cells)))
                    x_coords = np.tile(np.arange(grid_size), grid_size)[:n_cells]
                    y_coords = np.repeat(np.arange(grid_size), grid_size)[:n_cells]
                    
                    df = adata.obs.copy()
                    df['x'] = x_coords
                    df['y'] = y_coords
            
            # Save as CSV
            csv_path = os.path.join(output_dir, 'data.csv')
            df.to_csv(csv_path, index=True)
            
            # Create a simple TissUUmaps project file
            project_config = {
                "filename": "data.csv",
                "comment": "Generated by tmapserver",
                "dataset": [{
                    "name": "data.csv",
                    "path": "data.csv"
                }]
            }
            
            project_path = os.path.join(output_dir, 'project.tmap')
            with open(project_path, 'w') as f:
                json.dump(project_config, f, indent=2)
            
            return project_path, csv_path
            
        except Exception as e:
            raise RuntimeError(f"Failed to convert AnnData for TissUUmaps: {e}")
    
    def start_server(self, project_path, port=5000):
        """Start TissUUmaps server."""
        try:
            # Find an available port
            port = self.find_available_port(port)
            
            # Start TissUUmaps server
            cmd = [
                'tissuumaps_server', 
                project_path,
                '--port', str(port),
            ]
            
            print(cmd)
            print(f"aStarting TissUUmaps server on port {port}...")
            self.process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )

            print("hellp")
            
            # Wait for server to start
            self.server_url = f"http://127.0.0.1:{port}"
            
            print("hellp")
            # Give server time to start and check if it's running
            for _ in range(30):  # Wait up to 30 seconds
                try:
                    response = requests.get(self.server_url, timeout=1)
                    if response.status_code == 200:
                        print(f"TissUUmaps server started successfully!")
                        print(f"Server URL: {self.server_url}")
                        return self.server_url
                except:
                    pass
                time.sleep(1)
            
            # If we get here, server didn't start properly
            if self.process.poll() is not None:
                stdout, stderr = self.process.communicate()
                raise RuntimeError(f"Server failed to start. Error: {stderr}")
            
            # Server might be starting, return URL anyway
            print(f"Server URL: {self.server_url}")
            print("Note: Server may still be starting. Please wait a moment before accessing.")
            return self.server_url
            
        except Exception as e:
            raise RuntimeError(f"Failed to start TissUUmaps server: {e}")
    
    def find_available_port(self, start_port=5000):
        """Find an available port starting from start_port."""
        import socket
        port = start_port
        while port < start_port + 100:  # Try 100 ports
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.bind(('127.0.0.1', port))
                    return port
            except OSError:
                port += 1
        raise RuntimeError("No available ports found")
    
    def open_browser(self):
        """Open the server URL in default browser."""
        if self.server_url:
            print(f"Opening {self.server_url} in your default browser...")
            webbrowser.open(self.server_url)
    
    def stop_server(self):
        """Stop the TissUUmaps server."""
        if self.process:
            try:
                # Terminate the process gracefully
                self.process.terminate()
                self.process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                # Force kill if it doesn't terminate
                self.process.kill()
                self.process.wait()
            finally:
                self.process = None
                print("TissUUmaps server stopped.")
    
    def cleanup_temp_files(self):
        """Clean up temporary files."""
        if self.temp_dir and os.path.exists(self.temp_dir):
            shutil.rmtree(self.temp_dir)
            self.temp_dir = None
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.stop_server()
        self.cleanup_temp_files()

def run_tissuumaps_server(adata, temp_dir=None, port=5000, open_browser=True):
    """
    Convenience function to run TissUUmaps server with AnnData.
    
    Args:
        adata: AnnData object
        temp_dir: Directory to save temporary files (optional)
        port: Port to start server on (default: 5000)
        open_browser: Whether to open browser automatically (default: True)
    
    Returns:
        TissUUmapsServer instance
    """
    server = TissUUmapsServer()
    
    # Ensure TissUUmaps is available
    if not server.ensure_tissuumaps_available():
        raise RuntimeError("Failed to install TissUUmaps")
    
    # Create temp directory if not provided
    if temp_dir is None:
        server.temp_dir = tempfile.mkdtemp(prefix='tissuumaps_')
        temp_dir = server.temp_dir
    
    # Convert AnnData and start server
    project_path, csv_path = server.convert_anndata_for_tissuumaps(adata, temp_dir)
    url = server.start_server(os.path.dirname(project_path), port)
    
    if open_browser:
        server.open_browser()
    
    return server 
